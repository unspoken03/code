<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Study Site</title>
  <style>
    :root {
      --bg-color: #1a1a1a;
      --nav-color: #252525;
      --text-color: #f0f0f0;
      --accent-color: #6e6aff;
      --border-color: #333333;
      --card-color: #252525;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
    }
    
    body {
      background-color: var(--bg-color);
      color: var(--text-color);
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      padding-top: 80px;
    }
    
    .nav-bar {
      background-color: var(--nav-color);
      border: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      padding: 0 30px;
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      width: 700px;
      height: 50px;
      max-width: 95%;
      z-index: 100;
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border-radius: 9999px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      transition: transform 0.3s ease, opacity 0.3s ease;
      align-items: center;
    }
    
    .nav-bar.hidden {
      transform: translateX(-50%) translateY(-100px);
      opacity: 0;
    }
    
    .nav-item {
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-color);
      opacity: 0.6;
      transition: opacity 0.2s ease, color 0.2s ease;
      cursor: pointer;
      padding: 0 10px;
      height: 100%;
      text-decoration: none;
    }
    
    .nav-item.active {
      opacity: 1;
      color: var(--accent-color);
    }
    
    .nav-item:hover {
      opacity: 0.9;
    }
    
    .nav-label {
      font-size: 19px;
      font-weight: 500;
    }
    
    .content {
      flex: 1;
      padding: 20px;
      display: none;
      flex-direction: column;
      align-items: stretch;
      max-width: 1000px;
      margin: 0 auto;
      width: 100%;
    }
    
    .content.active {
      display: flex;
    }
    
    h1 {
      margin-bottom: 20px;
      font-size: 24px;
      font-weight: 600;
    }
    
    p {
      margin-bottom: 15px;
      line-height: 1.6;
    }
    
    .card {
      background-color: var(--card-color);
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      border: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
    }
    
    .center-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      margin-bottom: 30px;
    }
    
    /* Add button style */
    .add-button {
      width: 50px;
      height: 50px;
      background-color: var(--accent-color);
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 30px;
      color: white;
      cursor: pointer;
      margin: 0 auto 20px auto;
      transition: all 0.2s ease;
      border: none;
      outline: none;
    }
    
    .add-button:hover {
      opacity: 0.9;
      transform: scale(1.05);
    }
    
    /* Document container styles */
    .docs-container {
      display: flex;
      flex-direction: column;
      width: 100%;
      gap: 20px;
    }
    
    .doc-item {
      background-color: var(--card-color);
      border-radius: 12px;
      border: 1px solid var(--border-color);
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }
    
    .doc-title {
      font-size: 18px;
      font-weight: 600;
      padding: 15px;
      border-bottom: 1px solid var(--border-color);
      background-color: rgba(110, 106, 255, 0.1);
    }
    
    .doc-content {
      padding: 15px;
      max-height: 300px;
      overflow-y: auto;
    }
    
    /* File input style */
    .file-input-container {
      display: none;
      flex-direction: column;
      align-items: center;
      background-color: var(--card-color);
      border-radius: 12px;
      padding: 20px;
      border: 1px solid var(--border-color);
      margin-bottom: 20px;
    }
    
    .file-input-container.active {
      display: flex;
    }
    
    .file-input-header {
      margin-bottom: 15px;
      font-size: 18px;
      font-weight: 600;
    }
    
    .file-input-wrapper {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 15px;
      width: 100%;
    }
    
    /* Custom file input styling */
    .custom-file-input {
      position: relative;
      display: inline-block;
      width: 100%;
    }
    
    .custom-file-input input[type="file"] {
      position: absolute;
      left: -9999px;
      opacity: 0;
      width: 0.1px;
      height: 0.1px;
    }
    
    .custom-file-input label {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 10px 15px;
      background-color: var(--nav-color);
      color: var(--text-color);
      border-radius: 8px;
      border: 1px solid var(--border-color);
      cursor: pointer;
      width: 100%;
      transition: all 0.2s ease;
      font-weight: normal;
    }
    
    .custom-file-input label:hover {
      background-color: #333;
    }
    
    .custom-file-input span {
      margin-left: 8px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .custom-file-input label::before {
      content: "Choose File";
      font-weight: 500;
    }
    
    .import-btn {
      padding: 10px 20px;
      background-color: var(--accent-color);
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.2s ease;
      width: 100%;
    }
    
    .import-btn:hover {
      opacity: 0.9;
    }
    
    /* Scrollbar styling */
    ::-webkit-scrollbar {
      width: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: var(--bg-color);
      border-radius: 8px;
    }
    
    ::-webkit-scrollbar-thumb {
      background: var(--accent-color);
      border-radius: 8px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: #5652d6;
    }
    
    /* Loading indicator */
    .loading-indicator {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 15px;
      color: var(--text-color);
    }
    
    /* Document content styling for DOCX conversion */
    .doc-content {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
      line-height: 1.5;
    }
    
    .doc-content h1, 
    .doc-content h2, 
    .doc-content h3, 
    .doc-content h4, 
    .doc-content h5, 
    .doc-content h6 {
      margin-top: 1em;
      margin-bottom: 0.5em;
      color: var(--text-color);
    }
    
    .doc-content p {
      margin-bottom: 1em;
    }
    
    .doc-content ul, 
    .doc-content ol {
      margin-bottom: 1em;
      padding-left: 2em;
    }
    
    .doc-content table {
      border-collapse: collapse;
      margin-bottom: 1em;
      width: 100%;
    }
    
    .doc-content table, 
    .doc-content th, 
    .doc-content td {
      border: 1px solid var(--border-color);
    }
    
    .doc-content th, 
    .doc-content td {
      padding: 0.5em;
      text-align: left;
    }
    
    .doc-content img {
      max-width: 100%;
      height: auto;
    }
  </style>
</head>
<body>
  <nav class="nav-bar">
    <div class="nav-item" data-tab="home">
      <div class="nav-label">Home</div>
    </div>
    <div class="nav-item" data-tab="notes">
      <div class="nav-label">Answers</div>
    </div>
    <div class="nav-item" data-tab="flashcards">
      <div class="nav-label">AI</div>
    </div>
    <div class="nav-item" data-tab="calendar">
      <div class="nav-label">Games sites</div>
    </div>
    <div class="nav-item" data-tab="settings">
      <div class="nav-label">ChatRoom</div>
    </div>
  </nav>
  
  <div id="home" class="content active">
    <div class="center-content">
      <h1 style="text-align: center; margin-top: 40px; margin-bottom: 30px; font-size: 50px;">vnbvnbvbnvnbv</h1>
      <p style="text-align: center; margin-bottom: 40px; font-size: 18px;">dfsdfsdf</p>
    </div>
    
    <div class="card">
      <h3>About:</h3>
      <p>This site is for a specific group of people, who decided that school is stupid and that kids need a little happiness in school.</p>
      <div style="display: flex; flex-direction: column; padding-left: 20px; margin-bottom: 15px;">
        <div style="margin-bottom: 12px;"><strong>Home Tab</strong> - This dashboard with app information and quick access to everything</div>
        <div style="margin-bottom: 12px;"><strong>Answers Tab</strong> - The answers for Ms.Prezants class</div>
        <div style="margin-bottom: 12px;"><strong>AI Tab</strong> - All AI sites added and it own chatgpt</div>
        <div style="margin-bottom: 12px;"><strong>Game Sites Tab</strong> - The name explains it all</div>
        <div style="margin-bottom: 12px;"><strong>ChatRoom Tab</strong> - The fully hidden chatroom where all the members can chat</div>
      </div>
    </div>
    
    <div class="card" style="margin-top: 20px;">
      <h3>Security:</h3>
      <p>This site was designed for safety by the most awesome person ever and also the creator of this site.</p>
      <p>The site is supposted to block goguardian, be fully anonymous to the school, and give the users the best expirience ever!!</p>
      <p>It comes with AI, No more risks of being caught on your phone by the teachers because this site has built in AI.</p>
    </div>
  </div>
  
  <div id="notes" class="content">
    <h1>Answers</h1>
    <p>Import your answer documents from Google Drive below.</p>
    
    <button class="add-button" id="addButton">+</button>
    
    <div class="file-input-container" id="fileInputContainer">
      <div class="file-input-header">Import Document</div>
      <div class="file-input-wrapper">
        <div class="custom-file-input">
          <input type="file" id="docxFile" accept=".docx">
          <label for="docxFile">
            <span id="file-name">No file selected</span>
          </label>
        </div>
        <button class="import-btn" id="importBtn">Import Document</button>
      </div>
      <p style="margin-top: 15px; font-size: 14px; opacity: 0.7;">You can download answers from Google Drive and import them here.</p>
    </div>
    
    <div class="docs-container" id="docsContainer">
      <!-- Documents will be added here -->
    </div>
  </div>
  
  <div id="flashcards" class="content">
    <h1>AI</h1>
    <p>AI tools will appear here.</p>
  </div>
  
  <div id="calendar" class="content">
    <h1>Game Sites</h1>
    <p>Game sites will appear here.</p>
  </div>
  
  <div id="settings" class="content">
    <h1>ChatRoom</h1>
    <p>Chat room will appear here.</p>
  </div>

  <!-- Include mammoth.js library for DOCX parsing -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.4.0/mammoth.browser.min.js"></script>
  
  <script>
    // Tab switching functionality
    const navItems = document.querySelectorAll('.nav-item');
    const contentTabs = document.querySelectorAll('.content');
    const navBar = document.querySelector('.nav-bar');
    
    // Set Home as active by default
    document.querySelector('[data-tab="home"]').classList.add('active');
    
    // Variable to track current tab
    let currentTab = 'home';
    
    // Nav bar hide/show functionality
    const showNavBar = () => {
      navBar.classList.remove('hidden');
    };
    
    const hideNavBar = () => {
      if (currentTab !== 'home') {
        navBar.classList.add('hidden');
      }
    };
    
    // Create detection area for mouse
    const navDetectionArea = document.createElement('div');
    navDetectionArea.style.position = 'fixed';
    navDetectionArea.style.top = '0';
    navDetectionArea.style.left = '0';
    navDetectionArea.style.width = '100%';
    navDetectionArea.style.height = '100px';
    navDetectionArea.style.zIndex = '99';
    document.body.appendChild(navDetectionArea);
    
    navDetectionArea.addEventListener('mouseenter', showNavBar);
    document.addEventListener('mousemove', (e) => {
      // If mouse is not near the top and not over the nav bar itself
      if (e.clientY > 150 && !navBar.contains(e.target) && currentTab !== 'home') {
        hideNavBar();
      }
    });
    
    // Tab switching
    navItems.forEach(item => {
      item.addEventListener('click', () => {
        const tabId = item.getAttribute('data-tab');
        currentTab = tabId;
        
        // Update active tab in navigation
        navItems.forEach(navItem => navItem.classList.remove('active'));
        item.classList.add('active');
        
        // Show the selected content
        contentTabs.forEach(tab => tab.classList.remove('active'));
        document.getElementById(tabId).classList.add('active');
        
        // Always show nav on home, maybe hide on others
        if (tabId === 'home') {
          showNavBar();
        }
      });
    });
    
    // Document import functionality
    const addButton = document.getElementById('addButton');
    const fileInputContainer = document.getElementById('fileInputContainer');
    const importBtn = document.getElementById('importBtn');
    const docxFileInput = document.getElementById('docxFile');
    const fileNameDisplay = document.getElementById('file-name');
    const docsContainer = document.getElementById('docsContainer');
    
    // Update file name display when file is selected
    docxFileInput.addEventListener('change', function() {
      if (this.files.length > 0) {
        fileNameDisplay.textContent = this.files[0].name;
      } else {
        fileNameDisplay.textContent = 'No file selected';
      }
    });
    
    // Toggle file input container
    addButton.addEventListener('click', () => {
      // First open Google Drive in a new tab
      window.open('https://drive.google.com', '_blank');
      
      // Show the file input container
      fileInputContainer.classList.toggle('active');
    });
    
    // Handle document import using mammoth.js
    importBtn.addEventListener('click', () => {
      const file = docxFileInput.files[0];
      if (!file) {
        alert('Please select a document file first.');
        return;
      }
      
      if (file.name.split('.').pop().toLowerCase() !== 'docx') {
        alert('Please select a .docx file.');
        return;
      }
      
      // Create a loading indicator
      const loadingElement = document.createElement('div');
      loadingElement.textContent = 'Converting document...';
      loadingElement.style.padding = '10px';
      loadingElement.style.textAlign = 'center';
      fileInputContainer.appendChild(loadingElement);
      
      // Create a document element
      const docElement = document.createElement('div');
      docElement.className = 'doc-item';
      
      // Create title element (use filename without extension)
      const titleElement = document.createElement('div');
      titleElement.className = 'doc-title';
      titleElement.textContent = file.name.replace(/\.docx$/i, '');
      
      // Create content container
      const contentElement = document.createElement('div');
      contentElement.className = 'doc-content';
      
      // Use mammoth.js to convert the DOCX to HTML
      const reader = new FileReader();
      reader.onload = function(loadEvent) {
        const arrayBuffer = loadEvent.target.result;
        
        mammoth.convertToHtml({arrayBuffer: arrayBuffer})
          .then(function(result) {
            // Add styling to the converted content
            contentElement.innerHTML = result.value;
            
            // Add elements to the document container
            docElement.appendChild(titleElement);
            docElement.appendChild(contentElement);
            
            // Add the document to the container
            docsContainer.appendChild(docElement);
            
            // Reset file input and hide the container
            docxFileInput.value = '';
            fileInputContainer.removeChild(loadingElement);
            fileInputContainer.classList.remove('active');
            
            // Log any warnings
            if (result.messages.length > 0) {
              console.log("Warnings when converting DOCX document:");
              console.log(result.messages);
            }
          })
          .catch(function(error) {
            console.error(error);
            alert('Error parsing document: ' + error.message);
            fileInputContainer.removeChild(loadingElement);
          });
      };
      
      reader.onerror = function() {
        alert('Error reading the file');
        fileInputContainer.removeChild(loadingElement);
      };
      
      reader.readAsArrayBuffer(file);
    });
    
    // Add a "loading" class to indicate the document is being parsed
    function addLoadingClass(element) {
      element.classList.add('loading');
    }
    
    function removeLoadingClass(element) {
      element.classList.remove('loading');
    }
  </script>
</body>
</html>