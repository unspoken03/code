<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Agar.io Clone</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #f0f0f0;
            font-family: Arial, sans-serif;
        }
        canvas {
            display: block;
        }
        #score {
            position: absolute;
            top: 10px;
            left: 10px;
            font-size: 20px;
            color: #333;
        }
        #leaderboard {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(255, 255, 255, 0.7);
            padding: 10px;
            border-radius: 5px;
            color: #333;
            width: 180px;
        }
        #leaderboard h3 {
            text-align: center;
            margin-top: 0;
            margin-bottom: 5px;
        }
        #leaderboard ol {
            margin: 0;
            padding-left: 25px;
        }
        #instructions {
            position: absolute;
            bottom: 10px;
            right: 10px;
            font-size: 16px;
            color: #333;
            background-color: rgba(255, 255, 255, 0.7);
            padding: 10px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="score">Score: 0</div>
    <div id="leaderboard">
        <h3>Leaderboard</h3>
        <ol id="leaders"></ol>
    </div>
    <div id="instructions">
        <p>Move your mouse to control your cell</p>
        <p>Eat smaller cells to grow larger</p>
        <p>Avoid bigger cells or you'll be eaten!</p>
        <p>Press SPACE to split</p>
        <p>Watch out for green viruses!</p>
    </div>

    <script>
        // Game canvas and context
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');

        // Resize canvas to window size
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        // Game variables
        let score = 0;
        const worldSize = 2000; // World dimensions (bigger than screen)
        const foodCount = 100; // Number of food pellets
        const botCount = 10; // Number of AI opponents
        const virusCount = 15; // Number of virus orbs
        let foods = [];
        let bots = [];
        let viruses = [];
        let playerCells = []; // Player can have multiple cells after splitting
        let cameraX = 0;
        let cameraY = 0;
        let mouseX = 0;
        let mouseY = 0;
        let leaderboard = [];
        
        // Bot names pool
        const botNames = [
            "SlimeKing", "BlobMaster", "CellCrusher", "AgarPro", "OrbEater",
            "MassiveMass", "CellDivider", "BubbleQueen", "CircleOfLife", "AgarGod",
            "TopFeeder", "CellHunter", "BlobbyBoy", "RoundOne", "DivideAndConquer",
            "SplitMaster", "SphericalThreat", "GrowthMachine", "CellCollector", "MassiveBeast"
        ];

        // Colors
        const colors = [
            '#FF5722', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5',
            '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50',
            '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800'
        ];

        // Random function for positions and sizes
        function random(min, max) {
            return Math.random() * (max - min) + min;
        }

        // Get random color
        function getRandomColor() {
            return colors[Math.floor(Math.random() * colors.length)];
        }

        // Cell class for player, bots, food, and viruses
        class Cell {
            constructor(x, y, radius, color, isPlayer = false, isBot = false, isVirus = false) {
                this.x = x;
                this.y = y;
                this.radius = radius;
                this.color = color;
                this.isPlayer = isPlayer;
                this.isBot = isBot;
                this.isVirus = isVirus;
                this.velocity = {
                    x: 0,
                    y: 0
                };
                // Speed properties
                this.speed = isPlayer || isBot ? 3 : 0; // Base speed
                this.targetX = x;
                this.targetY = y;
                this.name = isPlayer ? "You" : isBot ? botNames[Math.floor(Math.random() * botNames.length)] : "";
                this.mass = Math.PI * radius * radius;
                this.splitCooldown = 0;
                this.mergeTime = 0;
                this.parentId = null; // For tracking split cells' parent
                
                // Soft body properties
                this.points = []; // Points around the circumference
                this.pointCount = 25; // Number of points
                this.pointsAngle = []; // Current angle of each point
                this.pointsTargetAngle = []; // Target angle for smooth movement
                this.jiggleAmount = 0.1; // Amount of jiggle (softness)
                this.jiggleSpeed = 0.05; // Speed of jiggle
                this.initSoftBody();
            }
            
            // Initialize soft body points
            initSoftBody() {
                for (let i = 0; i < this.pointCount; i++) {
                    const angle = (i / this.pointCount) * Math.PI * 2;
                    this.pointsAngle.push(angle);
                    this.pointsTargetAngle.push(angle);
                    this.points.push({
                        x: this.x + Math.cos(angle) * this.radius,
                        y: this.y + Math.sin(angle) * this.radius,
                        distance: this.radius
                    });
                }
            }
            
            // Update soft body
            updateSoftBody() {
                if (this.isVirus) return; // Viruses don't jiggle
                
                // Skip for very small cells
                if (this.radius < 15) return;
                
                // Update jiggle factor based on mass and speed
                const speedFactor = Math.sqrt(this.velocity.x * this.velocity.x + this.velocity.y * this.velocity.y);
                const massJiggleFactor = Math.min(1, 30 / this.radius);
                const jiggle = this.jiggleAmount * massJiggleFactor * (1 + speedFactor * 0.1);
                
                // Update each point
                for (let i = 0; i < this.pointCount; i++) {
                    // Move target angle slightly
                    if (Math.random() < 0.1) {
                        this.pointsTargetAngle[i] = this.pointsAngle[i] + (Math.random() * 2 - 1) * jiggle;
                    }
                    
                    // Smooth transition to target angle
                    this.pointsAngle[i] += (this.pointsTargetAngle[i] - this.pointsAngle[i]) * this.jiggleSpeed;
                    
                    // Calculate new position
                    const angle = this.pointsAngle[i];
                    this.points[i] = {
                        x: this.x + Math.cos(angle) * this.radius,
                        y: this.y + Math.sin(angle) * this.radius,
                        distance: this.radius
                    };
                }
            }

            // Update cell position based on velocity
            update() {
                // Update cooldowns
                if (this.splitCooldown > 0) this.splitCooldown--;
                if (this.mergeTime > 0) this.mergeTime--;
                
                // Only mobile cells move (not viruses)
                if (this.isVirus) return;
                
                if (this.isPlayer) {
                    // Calculate direction towards mouse
                    const dx = mouseX - canvas.width / 2;
                    const dy = mouseY - canvas.height / 2;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    
                    if (distance > 0) {
                        // Speed decreases as mass increases
                        const speedFactor = 5 / Math.sqrt(this.radius);
                        this.velocity.x = (dx / distance) * this.speed * speedFactor;
                        this.velocity.y = (dy / distance) * this.speed * speedFactor;
                    }
                } else if (this.isBot) {
                    let targetX = this.targetX;
                    let targetY = this.targetY;
                    let fleeing = false;
                    
                    // Bot AI - occasionally change direction
                    if (Math.random() < 0.01) {
                        this.targetX = random(0, worldSize);
                        this.targetY = random(0, worldSize);
                    }
                    
                    // Look for nearest food if small
                    if (this.radius < 50 && foods.length > 0) {
                        let closestFood = null;
                        let closestDistance = Infinity;
                        
                        for (const food of foods) {
                            const dx = food.x - this.x;
                            const dy = food.y - this.y;
                            const distance = Math.sqrt(dx * dx + dy * dy);
                            
                            if (distance < closestDistance && distance < 300) {
                                closestDistance = distance;
                                closestFood = food;
                            }
                        }
                        
                        if (closestFood) {
                            targetX = closestFood.x;
                            targetY = closestFood.y;
                        }
                    }
                    
                    // Look for threats (larger cells)
                    let nearestThreat = null;
                    let threatDistance = Infinity;
                    
                    // Check player cells as potential threats
                    for (const playerCell of playerCells) {
                        if (playerCell.radius > this.radius * 1.1) {
                            const dx = playerCell.x - this.x;
                            const dy = playerCell.y - this.y;
                            const distance = Math.sqrt(dx * dx + dy * dy);
                            
                            if (distance < 300 && distance < threatDistance) {
                                threatDistance = distance;
                                nearestThreat = playerCell;
                            }
                        }
                    }
                    
                    // Check other bots as potential threats
                    for (const bot of bots) {
                        if (bot !== this && bot.radius > this.radius * 1.1) {
                            const dx = bot.x - this.x;
                            const dy = bot.y - this.y;
                            const distance = Math.sqrt(dx * dx + dy * dy);
                            
                            if (distance < 300 && distance < threatDistance) {
                                threatDistance = distance;
                                nearestThreat = bot;
                            }
                        }
                    }
                    
                    // Flee from threat
                    if (nearestThreat) {
                        const dx = nearestThreat.x - this.x;
                        const dy = nearestThreat.y - this.y;
                        const distance = Math.sqrt(dx * dx + dy * dy);
                        
                        targetX = this.x - dx * 2;
                        targetY = this.y - dy * 2;
                        fleeing = true;
                    }
                    
                    // Look for prey (smaller cells to eat)
                    if (!fleeing) {
                        let nearestPrey = null;
                        let preyDistance = Infinity;
                        
                        // Check player cells as potential prey
                        for (const playerCell of playerCells) {
                            if (this.radius > playerCell.radius * 1.1) {
                                const dx = playerCell.x - this.x;
                                const dy = playerCell.y - this.y;
                                const distance = Math.sqrt(dx * dx + dy * dy);
                                
                                if (distance < 400 && distance < preyDistance) {
                                    preyDistance = distance;
                                    nearestPrey = playerCell;
                                }
                            }
                        }
                        
                        // Check other bots as potential prey
                        for (const bot of bots) {
                            if (bot !== this && this.radius > bot.radius * 1.1) {
                                const dx = bot.x - this.x;
                                const dy = bot.y - this.y;
                                const distance = Math.sqrt(dx * dx + dy * dy);
                                
                                if (distance < 400 && distance < preyDistance) {
                                    preyDistance = distance;
                                    nearestPrey = bot;
                                }
                            }
                        }
                        
                        // Chase prey
                        if (nearestPrey) {
                            targetX = nearestPrey.x;
                            targetY = nearestPrey.y;
                            
                            // Consider splitting if large enough and prey is within range
                            if (this.radius > 50 && this.splitCooldown === 0 && 
                                preyDistance < this.radius * 1.5 && 
                                this.radius > nearestPrey.radius * 1.75 && 
                                Math.random() < 0.1) {
                                this.split(nearestPrey.x, nearestPrey.y);
                            }
                        }
                    }
                    
                    // Avoid viruses if large enough to be split by them
                    if (this.radius > 40) {
                        for (const virus of viruses) {
                            const dx = virus.x - this.x;
                            const dy = virus.y - this.y;
                            const distance = Math.sqrt(dx * dx + dy * dy);
                            
                            if (distance < this.radius + virus.radius + 50) {
                                // Move away from virus
                                targetX = this.x - dx * 2;
                                targetY = this.y - dy * 2;
                                break;
                            }
                        }
                    }
                    
                    // Move towards target
                    const dx = targetX - this.x;
                    const dy = targetY - this.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    
                    if (distance > 0) {
                        // Speed decreases as mass increases
                        const speedFactor = 5 / Math.sqrt(this.radius);
                        this.velocity.x = (dx / distance) * this.speed * speedFactor;
                        this.velocity.y = (dy / distance) * this.speed * speedFactor;
                    }
                }

                // Update position
                this.x += this.velocity.x;
                this.y += this.velocity.y;
                
                // Keep within world bounds
                this.x = Math.max(this.radius, Math.min(worldSize - this.radius, this.x));
                this.y = Math.max(this.radius, Math.min(worldSize - this.radius, this.y));
                
                // Update mass (slowly decrease for large cells)
                if (this.radius > 50) {
                    this.mass *= 0.9998; // Very slow decay
                    this.radius = Math.sqrt(this.mass / Math.PI);
                }
            }
            
            // Split the cell into two
            split(targetX, targetY) {
                if (this.radius < 35) return false; // Too small to split
                if (this.splitCooldown > 0) return false; // On cooldown
                
                // Calculate direction
                const dx = targetX - this.x;
                const dy = targetY - this.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                // Create new cell with half the mass
                const newRadius = this.radius / Math.sqrt(2);
                this.radius = newRadius;
                this.mass = Math.PI * this.radius * this.radius;
                
                // Create new cell
                const newCell = new Cell(
                    this.x,
                    this.y,
                    newRadius,
                    this.color,
                    this.isPlayer,
                    this.isBot
                );
                
                newCell.name = this.name;
                newCell.splitCooldown = 20; // Can't split again immediately
                newCell.mergeTime = 100; // Time before merging is possible
                newCell.parentId = this; // Link to parent cell
                
                // Add velocity to new cell
                const ejectionSpeed = 10;
                if (distance > 0) {
                    newCell.velocity.x = (dx / distance) * ejectionSpeed;
                    newCell.velocity.y = (dy / distance) * ejectionSpeed;
                } else {
                    newCell.velocity.x = ejectionSpeed;
                    newCell.velocity.y = 0;
                }
                
                // Set cooldowns
                this.splitCooldown = 20;
                this.mergeTime = 100;
                
                return newCell;
            }
            
            // Hit a virus
            hitVirus() {
                if (this.radius < 35) return []; // Too small to be split by virus
                
                const fragments = [];
                const numberOfFragments = Math.min(Math.floor(this.mass / 100) + 2, 16);
                const newMass = this.mass / numberOfFragments;
                const newRadius = Math.sqrt(newMass / Math.PI);
                
                for (let i = 0; i < numberOfFragments - 1; i++) {
                    const angle = (2 * Math.PI * i) / (numberOfFragments - 1);
                    const ejectionSpeed = 8;
                    
                    const fragment = new Cell(
                        this.x,
                        this.y,
                        newRadius,
                        this.color,
                        this.isPlayer,
                        this.isBot
                    );
                    
                    fragment.name = this.name;
                    fragment.velocity.x = Math.cos(angle) * ejectionSpeed;
                    fragment.velocity.y = Math.sin(angle) * ejectionSpeed;
                    fragment.splitCooldown = 20;
                    fragment.mergeTime = 100;
                    fragment.parentId = this;
                    
                    fragments.push(fragment);
                }
                
                // Resize the original cell
                this.radius = newRadius;
                this.mass = newMass;
                this.splitCooldown = 20;
                this.mergeTime = 100;
                
                return fragments;
            }
            
            // Draw the cell
            draw() {
                const screenX = this.x - cameraX + canvas.width / 2;
                const screenY = this.y - cameraY + canvas.height / 2;
                
                // Only draw if on screen
                if (
                    screenX + this.radius < 0 ||
                    screenX - this.radius > canvas.width ||
                    screenY + this.radius < 0 ||
                    screenY - this.radius > canvas.height
                ) {
                    return;
                }
                
                ctx.beginPath();
                
                if (this.isVirus) {
                    // Draw virus with spikes
                    const spikes = 25;
                    const outerRadius = this.radius;
                    const innerRadius = this.radius * 0.9;
                    
                    ctx.moveTo(screenX + outerRadius, screenY);
                    
                    for (let i = 0; i < spikes * 2; i++) {
                        const radius = i % 2 === 0 ? outerRadius : innerRadius;
                        const angle = (Math.PI * i) / spikes;
                        const x = screenX + radius * Math.cos(angle);
                        const y = screenY + radius * Math.sin(angle);
                        ctx.lineTo(x, y);
                    }
                    
                    ctx.fillStyle = '#00AA00'; // Green color for viruses
                } else {
                    // Draw normal cell
                    ctx.arc(screenX, screenY, this.radius, 0, Math.PI * 2);
                    ctx.fillStyle = this.color;
                }
                
                ctx.fill();
                ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';
                ctx.lineWidth = 2;
                ctx.stroke();
                ctx.closePath();
                
                // Draw cell name (for player and bots)
                if ((this.isPlayer || this.isBot) && this.radius > 20) {
                    ctx.fillStyle = 'white';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.font = `${Math.max(12, Math.min(this.radius / 2, 24))}px Arial`;
                    
                    // Draw the name of the cell
                    ctx.fillText(this.name, screenX, screenY);
                    
                    // Draw mass below name if large enough
                    if (this.radius > 30) {
                        const massText = Math.floor(this.mass).toString();
                        ctx.font = `${Math.max(10, Math.min(this.radius / 3, 16))}px Arial`;
                        ctx.fillText(massText, screenX, screenY + this.radius / 3);
                    }
                }
            }
            
            // Check collision with another cell
            collidesWith(otherCell) {
                const dx = this.x - otherCell.x;
                const dy = this.y - otherCell.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                return distance < this.radius + otherCell.radius;
            }
            
            // Check if this cell can eat another cell
            canEat(otherCell) {
                return this.radius > otherCell.radius * 1.1;
            }
            
            // Consume another cell and grow
            consume(otherCell) {
                // Calculate new area (πr²)
                const area1 = Math.PI * this.radius * this.radius;
                const area2 = Math.PI * otherCell.radius * otherCell.radius;
                const newArea = area1 + area2;
                
                // Calculate new radius from combined area
                this.radius = Math.sqrt(newArea / Math.PI);
                
                // Update score if player
                if (this.isPlayer) {
                    score += Math.floor(otherCell.radius);
                    scoreElement.textContent = `Score: ${score}`;
                }
            }
        }

        // Initialize game
        function initGame() {
            // Create player in the center of the world
            const playerCell = new Cell(worldSize / 2, worldSize / 2, 30, getRandomColor(), true, false);
            playerCells = [playerCell]; // Add to playerCells array
            
            // Create food pellets
            for (let i = 0; i < foodCount; i++) {
                foods.push(
                    new Cell(
                        random(0, worldSize),
                        random(0, worldSize),
                        random(5, 10),
                        getRandomColor()
                    )
                );
            }
            
            // Create bot cells
            for (let i = 0; i < botCount; i++) {
                bots.push(
                    new Cell(
                        random(0, worldSize),
                        random(0, worldSize),
                        random(20, 40),
                        getRandomColor(),
                        false,
                        true
                    )
                );
            }
            
            // Create viruses
            for (let i = 0; i < virusCount; i++) {
                viruses.push(
                    new Cell(
                        random(0, worldSize),
                        random(0, worldSize),
                        30, // Fixed size for viruses
                        '#00AA00', // Green color
                        false,
                        false,
                        true // Is a virus
                    )
                );
            }
            
            // Initialize leaderboard
            updateLeaderboard();
        }
        
        // Update leaderboard data
        function updateLeaderboard() {
            leaderboard = [];
            
            // Add player cells
            for (const cell of playerCells) {
                leaderboard.push({
                    name: cell.name,
                    mass: cell.mass,
                    isPlayer: true
                });
            }
            
            // Add bot cells
            for (const bot of bots) {
                leaderboard.push({
                    name: bot.name,
                    mass: bot.mass,
                    isPlayer: false
                });
            }
            
            // Sort by mass
            leaderboard.sort((a, b) => b.mass - a.mass);
            
            // Take top 10
            leaderboard = leaderboard.slice(0, 10);
            
            // Update DOM
            const leaderboardElement = document.getElementById('leaders');
            leaderboardElement.innerHTML = '';
            
            for (const entry of leaderboard) {
                const li = document.createElement('li');
                li.textContent = `${entry.name}: ${Math.floor(entry.mass)}`;
                if (entry.isPlayer) {
                    li.style.fontWeight = 'bold';
                }
                leaderboardElement.appendChild(li);
            }
        }
        
        // Draw grid background
        function drawGrid() {
            const gridSize = 50;
            const offsetX = cameraX % gridSize;
            const offsetY = cameraY % gridSize;
            
            ctx.beginPath();
            ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
            
            // Vertical lines
            for (let x = -offsetX; x < canvas.width; x += gridSize) {
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
            }
            
            // Horizontal lines
            for (let y = -offsetY; y < canvas.height; y += gridSize) {
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
            }
            
            ctx.stroke();
            ctx.closePath();
        }
        
        // Draw world border
        function drawBorder() {
            const leftEdge = -cameraX + canvas.width / 2;
            const topEdge = -cameraY + canvas.height / 2;
            
            ctx.beginPath();
            ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';
            ctx.lineWidth = 10;
            ctx.rect(leftEdge, topEdge, worldSize, worldSize);
            ctx.stroke();
            ctx.closePath();
        }
        
        // Game loop
        function gameLoop() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Calculate player's center of mass to position camera
            let totalMass = 0;
            let centerX = 0;
            let centerY = 0;
            
            for (const cell of playerCells) {
                totalMass += cell.mass;
                centerX += cell.x * cell.mass;
                centerY += cell.y * cell.mass;
            }
            
            if (totalMass > 0) {
                cameraX = centerX / totalMass;
                cameraY = centerY / totalMass;
            }
            
            // Draw background elements
            drawGrid();
            drawBorder();
            
            // Update total score
            score = Math.floor(totalMass);
            scoreElement.textContent = `Score: ${score}`;
            
            // Draw food
            for (let i = foods.length - 1; i >= 0; i--) {
                const food = foods[i];
                food.draw();
            }
            
            // Draw viruses
            for (const virus of viruses) {
                virus.draw();
            }
            
            // Process bot cells
            for (let i = bots.length - 1; i >= 0; i--) {
                const bot = bots[i];
                bot.update();
                bot.draw();
                
                // Check for merging between bot cells
                for (let j = i - 1; j >= 0; j--) {
                    const otherBot = bots[j];
                    
                    if (bot.parentId === otherBot || otherBot.parentId === bot) {
                        if (bot.mergeTime <= 0 && otherBot.mergeTime <= 0 && bot.collidesWith(otherBot)) {
                            // Merge the cells - remove the smaller one and make the larger one bigger
                            if (bot.mass > otherBot.mass) {
                                bot.consume(otherBot);
                                bots.splice(j, 1);
                                if (i > j) i--;
                            } else {
                                otherBot.consume(bot);
                                bots.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
                
                // Bot eating food
                for (let j = foods.length - 1; j >= 0; j--) {
                    const food = foods[j];
                    if (bot.collidesWith(food) && bot.canEat(food)) {
                        bot.consume(food);
                        // Replace eaten food
                        foods.splice(j, 1);
                        foods.push(
                            new Cell(
                                random(0, worldSize),
                                random(0, worldSize),
                                random(5, 10),
                                getRandomColor()
                            )
                        );
                    }
                }
                
                // Bot hitting virus
                for (let j = viruses.length - 1; j >= 0; j--) {
                    const virus = viruses[j];
                    if (bot.collidesWith(virus) && bot.radius > virus.radius) {
                        // Bot is split by virus
                        const fragments = bot.hitVirus();
                        if (fragments.length > 0) {
                            bots.push(...fragments);
                        }
                    }
                }
                
                // Bot eating player cells
                for (let j = playerCells.length - 1; j >= 0; j--) {
                    const playerCell = playerCells[j];
                    if (bot.collidesWith(playerCell) && bot.canEat(playerCell)) {
                        bot.consume(playerCell);
                        playerCells.splice(j, 1);
                        
                        // Game over if all player cells are gone
                        if (playerCells.length === 0) {
                            gameOver();
                            return;
                        }
                    }
                }
                
                // Player cells eating bot
                for (let j = playerCells.length - 1; j >= 0; j--) {
                    const playerCell = playerCells[j];
                    if (playerCell.collidesWith(bot) && playerCell.canEat(bot)) {
                        playerCell.consume(bot);
                        bots.splice(i, 1);
                        // Replace eaten bot after delay
                        setTimeout(() => {
                            if (bots.length < botCount) {
                                bots.push(
                                    new Cell(
                                        random(0, worldSize),
                                        random(0, worldSize),
                                        random(20, 40),
                                        getRandomColor(),
                                        false,
                                        true
                                    )
                                );
                            }
                        }, 2000);
                        break;
                    }
                }
            }
            
            // Process player cells
            for (let i = playerCells.length - 1; i >= 0; i--) {
                const playerCell = playerCells[i];
                playerCell.update();
                playerCell.draw();
                
                // Check for merging between player cells
                for (let j = i - 1; j >= 0; j--) {
                    const otherCell = playerCells[j];
                    
                    if (playerCell.parentId === otherCell || otherCell.parentId === playerCell) {
                        if (playerCell.mergeTime <= 0 && otherCell.mergeTime <= 0 && playerCell.collidesWith(otherCell)) {
                            // Merge the cells - remove the smaller one and make the larger one bigger
                            if (playerCell.mass > otherCell.mass) {
                                playerCell.consume(otherCell);
                                playerCells.splice(j, 1);
                            } else {
                                otherCell.consume(playerCell);
                                playerCells.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
                
                // Player eating food
                for (let j = foods.length - 1; j >= 0; j--) {
                    const food = foods[j];
                    if (playerCell.collidesWith(food) && playerCell.canEat(food)) {
                        playerCell.consume(food);
                        // Replace eaten food
                        foods.splice(j, 1);
                        foods.push(
                            new Cell(
                                random(0, worldSize),
                                random(0, worldSize),
                                random(5, 10),
                                getRandomColor()
                            )
                        );
                    }
                }
                
                // Player hitting virus
                for (let j = viruses.length - 1; j >= 0; j--) {
                    const virus = viruses[j];
                    if (playerCell.collidesWith(virus) && playerCell.radius > virus.radius) {
                        // Player is split by virus
                        const fragments = playerCell.hitVirus();
                        if (fragments.length > 0) {
                            playerCells.push(...fragments);
                            // Remove virus after it splits player
                            viruses.splice(j, 1);
                            // Add new virus somewhere else
                            setTimeout(() => {
                                viruses.push(
                                    new Cell(
                                        random(0, worldSize),
                                        random(0, worldSize),
                                        30,
                                        '#00AA00',
                                        false,
                                        false,
                                        true
                                    )
                                );
                            }, 5000);
                        }
                    }
                }
            }
            
            // Update leaderboard every 10 frames
            if (Math.random() < 0.1) {
                updateLeaderboard();
            }
            
            // Keep the game running
            requestAnimationFrame(gameLoop);
        }
        
        // Game over function
        function gameOver() {
            // Reset game
            score = 0;
            scoreElement.textContent = `Score: ${score}`;
            foods = [];
            bots = [];
            playerCells = [];
            viruses = [];
            
            // Show game over message
            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            ctx.fillStyle = 'white';
            ctx.textAlign = 'center';
            ctx.font = '48px Arial';
            ctx.fillText('Game Over', canvas.width / 2, canvas.height / 2 - 50);
            ctx.font = '24px Arial';
            ctx.fillText(`Final Score: ${score}`, canvas.width / 2, canvas.height / 2);
            ctx.fillText('Click to play again', canvas.width / 2, canvas.height / 2 + 50);
            
            // Listen for click to restart
            canvas.addEventListener('click', restartGame, { once: true });
        }
        
        // Restart game
        function restartGame() {
            initGame();
            gameLoop();
        }
        
        // Track mouse movement
        window.addEventListener('mousemove', (e) => {
            mouseX = e.clientX;
            mouseY = e.clientY;
        });
        
        // Handle keyboard input
        window.addEventListener('keydown', (e) => {
            // Space key for splitting
            if (e.code === 'Space') {
                // Only split if there are player cells
                if (playerCells.length > 0) {
                    const newCells = [];
                    
                    // Check each player cell for splitting
                    for (const cell of playerCells) {
                        if (cell.radius >= 35 && cell.splitCooldown === 0) {
                            // Calculate direction towards mouse
                            const dx = mouseX - canvas.width / 2;
                            const dy = mouseY - canvas.height / 2;
                            const distance = Math.sqrt(dx * dx + dy * dy);
                            
                            let targetX, targetY;
                            if (distance > 0) {
                                targetX = cell.x + (dx / distance) * 1000; // Far in the direction of mouse
                                targetY = cell.y + (dy / distance) * 1000;
                            } else {
                                targetX = cell.x + 1000; // Default to right if no direction
                                targetY = cell.y;
                            }
                            
                            const newCell = cell.split(targetX, targetY);
                            if (newCell) {
                                newCells.push(newCell);
                            }
                        }
                    }
                    
                    // Add all new cells at once
                    if (newCells.length > 0) {
                        playerCells.push(...newCells);
                    }
                }
            }
        });
        
        // Handle window resize
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
        
        // Start the game
        initGame();
        gameLoop();
    </script>
</body>
</html>