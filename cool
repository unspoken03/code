<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Agar.io Clone</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #f0f0f0;
            font-family: Arial, sans-serif;
        }
        canvas {
            display: block;
        }
        #score {
            position: absolute;
            top: 10px;
            left: 10px;
            font-size: 20px;
            color: #333;
        }
        #instructions {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 16px;
            color: #333;
            background-color: rgba(255, 255, 255, 0.7);
            padding: 10px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="score">Score: 0</div>
    <div id="instructions">
        <p>Move your mouse to control your cell</p>
        <p>Eat smaller cells to grow larger</p>
        <p>Avoid bigger cells or you'll be eaten!</p>
    </div>

    <script>
        // Game canvas and context
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');

        // Resize canvas to window size
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        // Game variables
        let score = 0;
        const worldSize = 2000; // World dimensions (bigger than screen)
        const foodCount = 100; // Number of food pellets
        const botCount = 10; // Number of AI opponents
        let foods = [];
        let bots = [];
        let player = null;
        let cameraX = 0;
        let cameraY = 0;
        let mouseX = 0;
        let mouseY = 0;

        // Colors
        const colors = [
            '#FF5722', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5',
            '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50',
            '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800'
        ];

        // Random function for positions and sizes
        function random(min, max) {
            return Math.random() * (max - min) + min;
        }

        // Get random color
        function getRandomColor() {
            return colors[Math.floor(Math.random() * colors.length)];
        }

        // Cell class for player, bots, and food
        class Cell {
            constructor(x, y, radius, color, isPlayer = false, isBot = false) {
                this.x = x;
                this.y = y;
                this.radius = radius;
                this.color = color;
                this.isPlayer = isPlayer;
                this.isBot = isBot;
                this.velocity = {
                    x: 0,
                    y: 0
                };
                // Bots have slower speed than player
                this.speed = isPlayer ? 3 : 1.5;
                this.targetX = x;
                this.targetY = y;
            }

            // Update cell position based on velocity
            update() {
                if (this.isPlayer) {
                    // Calculate direction towards mouse
                    const dx = mouseX - canvas.width / 2;
                    const dy = mouseY - canvas.height / 2;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    
                    if (distance > 0) {
                        this.velocity.x = (dx / distance) * (this.speed * (30 / (this.radius * 0.1 + 30)));
                        this.velocity.y = (dy / distance) * (this.speed * (30 / (this.radius * 0.1 + 30)));
                    }
                } else if (this.isBot) {
                    // If bot is targeting a new position
                    if (Math.random() < 0.01) {
                        this.targetX = random(0, worldSize);
                        this.targetY = random(0, worldSize);
                    }
                    
                    // Calculate direction towards target
                    const dx = this.targetX - this.x;
                    const dy = this.targetY - this.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    
                    if (distance > 0) {
                        this.velocity.x = (dx / distance) * (this.speed * (30 / (this.radius * 0.1 + 30)));
                        this.velocity.y = (dy / distance) * (this.speed * (30 / (this.radius * 0.1 + 30)));
                    }
                    
                    // Sometimes chase the player if close enough and smaller than the player
                    if (player && this.radius < player.radius * 0.85) {
                        const dxPlayer = player.x - this.x;
                        const dyPlayer = player.y - this.y;
                        const distanceToPlayer = Math.sqrt(dxPlayer * dxPlayer + dyPlayer * dyPlayer);
                        
                        if (distanceToPlayer < 300) {
                            this.velocity.x = -(dxPlayer / distanceToPlayer) * (this.speed * (30 / (this.radius * 0.1 + 30)));
                            this.velocity.y = -(dyPlayer / distanceToPlayer) * (this.speed * (30 / (this.radius * 0.1 + 30)));
                        }
                    }
                    // Sometimes chase the player if close enough and larger than the player
                    else if (player && this.radius > player.radius * 1.1) {
                        const dxPlayer = player.x - this.x;
                        const dyPlayer = player.y - this.y;
                        const distanceToPlayer = Math.sqrt(dxPlayer * dxPlayer + dyPlayer * dyPlayer);
                        
                        if (distanceToPlayer < 500) {
                            this.velocity.x = (dxPlayer / distanceToPlayer) * (this.speed * (30 / (this.radius * 0.1 + 30)));
                            this.velocity.y = (dyPlayer / distanceToPlayer) * (this.speed * (30 / (this.radius * 0.1 + 30)));
                        }
                    }
                }

                // Update position
                this.x += this.velocity.x;
                this.y += this.velocity.y;
                
                // Keep within world bounds
                this.x = Math.max(this.radius, Math.min(worldSize - this.radius, this.x));
                this.y = Math.max(this.radius, Math.min(worldSize - this.radius, this.y));
            }
            
            // Draw the cell
            draw() {
                const screenX = this.x - cameraX + canvas.width / 2;
                const screenY = this.y - cameraY + canvas.height / 2;
                
                // Only draw if on screen
                if (
                    screenX + this.radius < 0 ||
                    screenX - this.radius > canvas.width ||
                    screenY + this.radius < 0 ||
                    screenY - this.radius > canvas.height
                ) {
                    return;
                }
                
                ctx.beginPath();
                ctx.arc(screenX, screenY, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.fill();
                ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';
                ctx.lineWidth = 2;
                ctx.stroke();
                ctx.closePath();
                
                // Draw cell name (for player and bots)
                if (this.isPlayer || this.isBot) {
                    ctx.fillStyle = 'white';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.font = `${Math.max(12, Math.min(this.radius / 2, 24))}px Arial`;
                    ctx.fillText(this.isPlayer ? 'You' : 'Bot', screenX, screenY);
                }
            }
            
            // Check collision with another cell
            collidesWith(otherCell) {
                const dx = this.x - otherCell.x;
                const dy = this.y - otherCell.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                return distance < this.radius + otherCell.radius;
            }
            
            // Check if this cell can eat another cell
            canEat(otherCell) {
                return this.radius > otherCell.radius * 1.1;
            }
            
            // Consume another cell and grow
            consume(otherCell) {
                // Calculate new area (πr²)
                const area1 = Math.PI * this.radius * this.radius;
                const area2 = Math.PI * otherCell.radius * otherCell.radius;
                const newArea = area1 + area2;
                
                // Calculate new radius from combined area
                this.radius = Math.sqrt(newArea / Math.PI);
                
                // Update score if player
                if (this.isPlayer) {
                    score += Math.floor(otherCell.radius);
                    scoreElement.textContent = `Score: ${score}`;
                }
            }
        }

        // Initialize game
        function initGame() {
            // Create player in the center of the world
            player = new Cell(worldSize / 2, worldSize / 2, 30, getRandomColor(), true);
            
            // Create food pellets
            for (let i = 0; i < foodCount; i++) {
                foods.push(
                    new Cell(
                        random(0, worldSize),
                        random(0, worldSize),
                        random(5, 10),
                        getRandomColor()
                    )
                );
            }
            
            // Create bot cells
            for (let i = 0; i < botCount; i++) {
                bots.push(
                    new Cell(
                        random(0, worldSize),
                        random(0, worldSize),
                        random(20, 40),
                        getRandomColor(),
                        false,
                        true
                    )
                );
            }
        }
        
        // Draw grid background
        function drawGrid() {
            const gridSize = 50;
            const offsetX = cameraX % gridSize;
            const offsetY = cameraY % gridSize;
            
            ctx.beginPath();
            ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
            
            // Vertical lines
            for (let x = -offsetX; x < canvas.width; x += gridSize) {
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
            }
            
            // Horizontal lines
            for (let y = -offsetY; y < canvas.height; y += gridSize) {
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
            }
            
            ctx.stroke();
            ctx.closePath();
        }
        
        // Draw world border
        function drawBorder() {
            const leftEdge = -cameraX + canvas.width / 2;
            const topEdge = -cameraY + canvas.height / 2;
            
            ctx.beginPath();
            ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';
            ctx.lineWidth = 10;
            ctx.rect(leftEdge, topEdge, worldSize, worldSize);
            ctx.stroke();
            ctx.closePath();
        }
        
        // Game loop
        function gameLoop() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Center camera on player
            cameraX = player.x;
            cameraY = player.y;
            
            // Draw background elements
            drawGrid();
            drawBorder();
            
            // Update and draw food
            for (let i = foods.length - 1; i >= 0; i--) {
                const food = foods[i];
                food.draw();
                
                // Check if player can eat food
                if (player.collidesWith(food) && player.canEat(food)) {
                    player.consume(food);
                    // Replace eaten food
                    foods.splice(i, 1);
                    foods.push(
                        new Cell(
                            random(0, worldSize),
                            random(0, worldSize),
                            random(5, 10),
                            getRandomColor()
                        )
                    );
                }
            }
            
            // Update and draw bots
            for (let i = bots.length - 1; i >= 0; i--) {
                const bot = bots[i];
                bot.update();
                bot.draw();
                
                // Bot eating food
                for (let j = foods.length - 1; j >= 0; j--) {
                    const food = foods[j];
                    if (bot.collidesWith(food) && bot.canEat(food)) {
                        bot.consume(food);
                        // Replace eaten food
                        foods.splice(j, 1);
                        foods.push(
                            new Cell(
                                random(0, worldSize),
                                random(0, worldSize),
                                random(5, 10),
                                getRandomColor()
                            )
                        );
                    }
                }
                
                // Bot eating bot
                for (let j = bots.length - 1; j >= 0; j--) {
                    if (i !== j) {
                        const otherBot = bots[j];
                        if (bot.collidesWith(otherBot) && bot.canEat(otherBot)) {
                            bot.consume(otherBot);
                            // Replace eaten bot
                            bots.splice(j, 1);
                            bots.push(
                                new Cell(
                                    random(0, worldSize),
                                    random(0, worldSize),
                                    random(20, 40),
                                    getRandomColor(),
                                    false,
                                    true
                                )
                            );
                            if (i > j) i--; // Adjust index if removed element was before current
                        }
                    }
                }
                
                // Check if bot can eat player
                if (bot.collidesWith(player) && bot.canEat(player)) {
                    // Game over - restart
                    gameOver();
                    return;
                }
                
                // Check if player can eat bot
                if (player.collidesWith(bot) && player.canEat(bot)) {
                    player.consume(bot);
                    // Replace eaten bot
                    bots.splice(i, 1);
                    bots.push(
                        new Cell(
                            random(0, worldSize),
                            random(0, worldSize),
                            random(20, 40),
                            getRandomColor(),
                            false,
                            true
                        )
                    );
                }
            }
            
            // Update and draw player last (so it appears on top)
            player.update();
            player.draw();
            
            // Keep the game running
            requestAnimationFrame(gameLoop);
        }
        
        // Game over function
        function gameOver() {
            // Reset game
            score = 0;
            scoreElement.textContent = `Score: ${score}`;
            foods = [];
            bots = [];
            
            // Show game over message
            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            ctx.fillStyle = 'white';
            ctx.textAlign = 'center';
            ctx.font = '48px Arial';
            ctx.fillText('Game Over', canvas.width / 2, canvas.height / 2 - 50);
            ctx.font = '24px Arial';
            ctx.fillText(`Final Score: ${score}`, canvas.width / 2, canvas.height / 2);
            ctx.fillText('Click to play again', canvas.width / 2, canvas.height / 2 + 50);
            
            // Listen for click to restart
            canvas.addEventListener('click', restartGame, { once: true });
        }
        
        // Restart game
        function restartGame() {
            initGame();
            gameLoop();
        }
        
        // Track mouse movement
        window.addEventListener('mousemove', (e) => {
            mouseX = e.clientX;
            mouseY = e.clientY;
        });
        
        // Handle window resiz
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
        
        // Start the game
        initGame();
        gameLoop();
    </script>
</body>
</html>